" Basic options set"

filetype off

set showmatch " Do bracket matching

" search settings
set ignorecase " Do case insensitive matching
set smartcase " Do smart case matchin
set incsearch " Do inclusive search
set hlsearch " Highlight matching patterns

" mouse settings
set scrolloff=5
set ttyfast "set scrolling in vim

" indentation and tab settings
set expandtab " changes tabs to space
set shiftwidth=4 " number of spaces used for indentation
set tabstop=4 " number of spaces insert when tab is hit
set smarttab 
set smartindent

" status line settings
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ [BUFFER=%n]\ %{strftime('%c')}
set showcmd " show command in status
set laststatus=2 " show status line
set showmode

" folding settings
set foldmethod=indent
set foldlevel=99

set autoread

set tags=./tags; "ctags finder

" number settings
set number
set relativenumber

" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile

" Copy paste formatting
set paste

" Backspace fixes
set backspace=indent,eol,start

" ================================ Custom features =============================

"For syntax highlighting
syntax enable
if has ("syntax")
	syntax on
endif

" for filetype indentation
if has ("autocmd")
	filetype plugin indent on
endif

" To be able to undo changes after saving    
try    
    set undodir=~/.vim_runtime/temp_dirs/undodir        
    set undofile        
catch    
endtry

" For Vim to jump to last position when reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ================================ Plugins ====================================
call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'

Plug 'scrooloose/nerdtree'
" nerdtree settings
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
autocmd vimenter * NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

Plug 'vim-airline/vim-airline'
" airline settings
let g:airline#extensions#tabline#enabled = 1

Plug 'tpope/vim-fugitive'

if has('nvim') || v:version >= 800
    Plug 'fatih/vim-go'
endif

Plug 'ctrlpvim/ctrlp.vim'
" ctrlp settings
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_switch_buffer = 'et'

Plug 'majutsushi/tagbar'
" tagbar settings
nmap <F8> :TagbarToggle<CR>
autocmd vimenter * TagbarToggle

Plug 'scrooloose/syntastic'
" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

call plug#end()

" =============================== Colour schemes ===============================

set background=dark
if $COLORTERM == 'gnome-terminal'
      set t_Co=256
endif

try 
    colorscheme gruvbox
catch
endtry

" =========================== Custom keybindings ==============================

" Used for copy paste formatting    
nnoremap <F2> :set invpaste paste?<CR>    
imap <F2> <C-O>:set invpaste paste?<CR>    
set pastetoggle=<F2>

"for auto completion
set completeopt=longest,menuone
set omnifunc=syntaxcomplete#Complete
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" close current buffer with b+C
noremap <silent>bC :bd!<CR>
" open new buffer with b+E
nnoremap bE :e<Space>
" Change buffers with ctrl and arrow keys
nnoremap <C-Left> :bprevious<CR>
nnoremap <C-Right> :bnext<CR>
" toggle line numbers with \+N
nnoremap <leader>N :setlocal number! relativenumber!<cr>
"Remove all trailing whitespace by pressing \+W
nnoremap <leader>W :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
